你的程序先要读入一个整数n，范围是[3,100]，这表示井字棋棋盘的边长。
比如n=3就表示是一个3x3的棋盘。然后，要读入n行，每行n个数字，每个数字是1或0，依次表示[0,0]到[n-1,n-1]位置上的棋子。1表示X，0表示O（大写字母O）。
你的程序要判断其中是否存在某一方获胜，获胜的条件是存在整行或整列或整条对角线或整条反对角线上是相同的棋子。
如果存在，则输出代表获胜一方字母：X或O（大写字母X或O）；如果没有任何一方获胜，则输出NIL（三个大写字母，中间是字母I（India的I）。

注意：所给的棋盘上的棋子分布可能出现同一个棋子有多处满足获胜的条件，但是不会出现两种棋子都获胜的情况。

输入格式:
一个代表棋盘大小的数字n，后面跟上nxn个0或1的数字。

输出格式：
三种输出之一：
                X
                O
                NIL
                均为大写字母。

输入样例：

                4
                1 0 0 1
                0 1 0 0
                0 0 1 0
                1 0 0 1

输出样例：

                X

时间限制：500ms内存限制：32000kb
Java


import java.util.Scanner;

public class Main {

	public static void main(String[] args) 
	{
		Scanner in = new Scanner(System.in);
		final int size = in.nextInt();
		int[] [] board = new int [size][size];
		boolean getret = false;		
		int numOfX = 0;
		int numOfO = 0;
		
		for(int i=0;i<board.length;i++)
		{
			for(int j=0;j<board[i].length ;j++)
			{
				board[i][j] = in.nextInt();
			}
		}
		
		for(int i=0;i<board.length;i++)
		{
			numOfX = 0;
			numOfO = 0;
			
			for(int j=0;j<board[i].length ;j++)
			{
				if(board[i][j] == 1)
				{
					numOfX ++;
				}
				else
				{
					numOfO ++;
				}				
			}
			
			if( numOfX == size || numOfO == size )
			{
				getret = true;
				break;
			}
			
		}
		
		if(!getret)
		{
			for(int i=0;i<board.length;i++)
			{
				numOfX = 0;
				numOfO = 0;
				
				for(int j=0;j<board[i].length ;j++)
				{
					if(board[j][i] == 1)
					{
						numOfX ++;
					}
					else
					{
						numOfO ++;
					}				
				}
				
				if( numOfX == size || numOfO == size )
				{
					getret = true;
					break;
				}
			}
		}
		
		if(!getret)
		{
			numOfX = 0;
			numOfO = 0;
			
			for(int i=0;i<board.length;i++)
			{
				if( board[i][i] == 1 )
				{
					numOfX ++;
				}
				else 
				{
					numOfO ++;
				}
			}
			
			if( numOfX == size || numOfO == size )
			{
				getret = true;
			}
			
		}
		
		if(!getret)
		{
			numOfX = 0;
			numOfO = 0;
			
			for(int i=0;i<board.length;i++)
			{
				if( board[i][size-i-1] == 1 )
				{
					numOfX ++;
				}
				else 
				{
					numOfO ++;
				}
			}
			
			if( numOfX == size || numOfO == size )
			{
				getret = true;
			}
			
		}
		
		if(getret)
		{
			if(numOfX == size)
			{
				System.out.println("X");
			}
			else if (numOfO == size)
			{
				System.out.println("O");
			}
		}
		else
		{
			System.out.println("NIL");
		}
		
	}

}
